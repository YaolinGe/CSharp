@using System.Collections.Generic
@using System.Linq
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.LineChart.Axes
@using ChartJs.Blazor.ChartJS.LineChart.DataSets
@using ChartJs.Blazor.ChartJS.LineChart.Options

<div>
    <LineChart TItem="float" Options="chartOptions" Data="chartData" Width="400" Height="200"></LineChart>
</div>

@code {
    private List<float> dataSamples = new List<float>();
    private List<float> archivedSamples = new List<float>();
    private int maxLength = 100;

    private LineOptions chartOptions = new LineOptions
    {
        Responsive = true,
        MaintainAspectRatio = false,
        Scales = new Scales
        {
            XAxes = new List<CartesianAxis>
            {
                new CartesianAxis
                {
                    ScaleLabel = new ScaleLabel
                    {
                        Display = true,
                        LabelString = "Time"
                    },
                    Ticks = new CartesianTicks
                    {
                        AutoSkip = true,
                        MaxTicksLimit = 10
                    }
                }
            },
            YAxes = new List<CartesianAxis>
            {
                new CartesianAxis
                {
                    ScaleLabel = new ScaleLabel
                    {
                        Display = true,
                        LabelString = "Value"
                    }
                }
            }
        }
    };

    private LineData<float> chartData = new LineData<float>
    {
        Labels = Enumerable.Range(0, 10).Select(x => x.ToString()).ToList(),
        Datasets = new List<LineDataset<float>>
        {
            new LineDataset<float>
            {
                Label = "Data Samples",
                Data = dataSamples,
                // Fill = FillingMode.Disabled,
                BackgroundColor = "rgba(54, 162, 235, 0.2)",
                BorderColor = "rgba(54, 162, 235, 1)",
                PointRadius = 0
            }
        }
    };

    private void AddDataSample(float sample)
    {
        dataSamples.Add(sample);
        if (dataSamples.Count > maxLength)
        {
            archivedSamples.AddRange(dataSamples.Take(dataSamples.Count - maxLength));
            dataSamples = dataSamples.Skip(dataSamples.Count - maxLength).ToList();
        }
        chartData.Datasets[0].Data = dataSamples;
    }
}
