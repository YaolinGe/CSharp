@page "/"
@rendermode InteractiveServer
@using System.Net
@using System.Net.Sockets
@using System.Diagnostics
@using System.IO
@using System.Text.RegularExpressions

<PageTitle>IPTest</PageTitle>

<p>My IP Address: @ipAddress</p>

<button @onclick="() => ScanIPAddressWithPort()">Scan Network</button>

@* @if (!string.IsNullOrEmpty(networkScanResult))
{
    <p>Network Scan Result:</p>
    <pre>@networkScanResult</pre>
} *@

<table>
    <thead>
        <tr>
            <th>IP</th>
            <th>Port</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @if (IPAddresses.Count > 0)
        {
            foreach (var ipAddressPort in IPAddresses)
            {
                <tr>
                    <td>@ipAddressPort.IPAddress</td>
                    <td>@ipAddressPort.Port</td>
                    <td>@(ipAddressPort.IsPortActive ? "Open" : "Closed")</td>
                </tr>
            }
        }
    </tbody>
</table>

@code
{
    string ipAddress;
    string networkScanResult;
    List<IPAddressPort> IPAddresses = new List<IPAddressPort>();

    protected override void OnInitialized()
    {
        ipAddress = GetMyIPAddress();
    }

    public string GetMyIPAddress()
    {
        var host = Dns.GetHostEntry(Dns.GetHostName());
        foreach (var ip in host.AddressList)
        {
            if (ip.AddressFamily == AddressFamily.InterNetwork)
            {
                return ip.ToString();
            }
        }
        throw new Exception("No network adapters with an IPv4 address in the system!");
    }

    public async Task ScanIPAddressWithPort()
    {
        Console.WriteLine("Scanning...");
        ProcessStartInfo startInfo = new ProcessStartInfo("arp", "-a")
            {
                CreateNoWindow = true,
                UseShellExecute = false,
                RedirectStandardOutput = true
            };

        using (Process process = Process.Start(startInfo))
        {
            using (StreamReader reader = process.StandardOutput)
            {
                networkScanResult = reader.ReadToEnd();
            }
        }

        List<string> ipAddresses = ExtractIPAddresses(networkScanResult);

        foreach (var ip in ipAddresses)
        {
            Console.WriteLine(ip);
            await ScanPorts(ip, 5000, 5000);
        }
        StateHasChanged();
    }

    public static List<string> ExtractIPAddresses(string input)
    {
        List<string> ipAddresses = new List<string>();
        string pattern = @"\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b";
        Regex regex = new Regex(pattern);

        string[] lines = input.Split(new[] { "\n" }, StringSplitOptions.RemoveEmptyEntries);

        foreach (var line in lines)
        {
            Match match = regex.Match(line);
            if (match.Success)
            {
                ipAddresses.Add(match.Value);
            }
        }
        return ipAddresses;
    }

    public async Task ScanPorts(string ipAddress, int startPort, int endPort)
    {
        Console.WriteLine($"Scanning IP: {ipAddress} from port {startPort} to {endPort}");

        for (int port = startPort; port <= endPort; port++)
        {
            try
            {
                using (TcpClient client = new TcpClient())
                {
                    var result = client.BeginConnect(ipAddress, port, null, null);
                    var success = result.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(1));
                    if (success)
                    {
                        Console.WriteLine($"Port {port} is open.");
                        IPAddresses.Add(new IPAddressPort { IPAddress = ipAddress, Port = port, IsPortActive = true });
                        InvokeAsync(StateHasChanged); 
                    }
                    client.EndConnect(result);
                }
            }
            catch
            {
                Console.WriteLine($"Port {port} is closed.");
            }
        }
    }

    public class IPAddressPort
    {
        public string IPAddress { get; set; }
        public int Port { get; set; }
        public bool IsPortActive { get; set; }
    }
}