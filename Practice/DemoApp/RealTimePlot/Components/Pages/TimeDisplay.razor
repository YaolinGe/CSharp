@implements IAsyncDisposable
@rendermode InteractiveServer

<p>Event starts at: @displayTime.ToString("g")</p>
<button class="btn btn-primary" @onclick="OnClick">Click me</button>
@code {
    [Inject]
    IJSRuntime JSRuntime
    {
        get;
        set;
    }
    private Task<IJSObjectReference> _module;
    private Task<IJSObjectReference> Module => _module ??= JSRuntime.InvokeAsync<IJSObjectReference>("import", "./scripts/components/TimeDisplay.js").AsTask();

    // IJSObjectReference module;
    private DateTime displayTime = DateTime.UtcNow;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./scripts/components/TimeDisplay.js");
        // module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./ChartTest.js");
        var module = await Module;

        await module.InvokeVoidAsync("sayHello");

    }
    private async Task OnClick()
    {
        var module = await Module;
        var converted = await module.InvokeAsync<string>("ConvertStartTimeToLocal", displayTime.ToString("g"));
        displayTime = DateTime.Parse(converted);
        StateHasChanged();
    }


    public async ValueTask DisposeAsync()
    {
        if (_module != null)
        {
            var module = await _module;
            await module.DisposeAsync();
        }
    }
}